@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="price-chart">
    <CompanyDetail Symbol="@company.Symbol" Name="@company.Name" LastPrice="@lastPrice" LastUpdated="@lastUpdated" Diff="@diff"
        Good="@lastUpdateGood">
        <LineChart @ref="lineChart" />
    </CompanyDetail>
</div>

@code
{
    [Parameter]
    public Company company { get; set; } = default!;

    [Parameter]
    public string color { get; set; } = default!;
    private HubConnection? hubConnection;
    private LineChart lineChart = default!;
    private ChartData chartData = default!;
    private double lastPrice = 0;
    private DateTimeOffset lastUpdated = DateTime.Now;
    private bool lastUpdateGood = false;
    private double diff = 0;
    private bool firstPrice = true;

    protected override async Task OnInitializedAsync()
    {
        chartData = InitialChartData.GetChartData(company.Symbol, color);
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/market-hub"))
        .Build();

        hubConnection.On<HistoricalPrice>("HistoricalPriceAdded", async (price) =>
        {
            if (price.Symbol == company.Symbol)
            {
                
                lastUpdateGood = lastPrice < price.Price;
                diff = Math.Round((1-(price.Price / lastPrice))*100, 2);
                lastPrice = Math.Round(price.Price, 2);
                lastUpdated = price.DateTime;
                if(firstPrice)
                {
                    chartData.Datasets[0] = InitialChartData.StockDataSet(price.Symbol, color, price.Price);
                    await lineChart.InitializeAsync(
                        chartData: chartData, 
                        chartOptions: InitialChartData.LineChartOptions);
                    firstPrice = false;
                }
                else {
                    await lineChart.AddDataAsync(
                        chartData: chartData, 
                        dataLabel: price.DateTime.ToString("mm:ss"), 
                        data: new LineChartDatasetData(price.Symbol,price.Price));
                    firstPrice = false;
                }
                
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @* await lineChart.InitializeAsync(chartData, InitialChartData.LineChartOptions); *@
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}